installed.packages()
install.packages(tydr)
###Creating a variable/string
a <- c(23,42,35,45,46)
typeof(a)
####converting to character
a <- as.character(c(23,42,35,45,46))
typeof(a)
print(a)
##Asst
while (answer < 40 || answer > 50) {
print("the answer must be a value between 40....50")
answer = as.integer(testAnswer())
}
while(x <2){
print(x <- x+1)
}
x <- 2
while(x <2){
print(x <- x+1)
}
while(x > 2){
print(x <- x+1)
}
while(x > 2){
print(x )
x <- x+1
}
x <- 1
while(x > 1){
print(x )
x <- x+1
}
while(x > 0){
print(x )
x <- x+1
}
##Asst
while (answer 40 %>% 50) {
print("the answer must be a value between 40....50")
answer = as.integer(testAnswer())
}
rnom(1)
rnorm(3)
rnorm(12)
###print squareroot
sqrt(rnorm(12))
###print squareroot
print(sqrt(rnorm(12)))
squareroot <- print(sqrt(rnorm(12)))
print(squareroot)
###create a vector of random normal values
a <- rnorm(12)
print(a)
a
while (distance <= maxDistance) {
distance <- 0
print(distance)
distance = distance + 1
}
#These sre recursive statements
#while loop/For loop\
#While loop
distance <- 0
maxDistance <- 10
while (distance <= maxDistance) {
distance <- 0
print(distance)
distance = distance + 1
}
while (distance <= maxDistance) {
distance <- 0
distance = distance + 1
print(distance)
}
###create a vector of random normal values
a <- rnorm(12)
rnorm(12)
rnorm(12)
rnorm(12)
a
a
a
###print squareroot
print(sqrt(a))
for (i in a) {
print(sqrt(a))
### print(paste0(i, " squareroot of each number ", i)
}
for (i in a) {
print(sqrt(i))
# print(paste0(i, " squareroot of each number ", i)
}
for (i in a) {
print(sqrt(i))
}
a
b <- sqrt(a)
b
#how to store
squareRoots <- 0
for (i in a) {
squareRoots <- (sqrt(i))
squareRoots
}
squareRoots
a
a[7]
a[7]=90
a
s <- 0
length(s)
s[2]=8
s
s[3]=9
s[10]=9
s
a
s
s[1]=a[2]
s
#how to store
a <-  c(33,44,55,66,888,99)
sqrt(a)
for (i in a) {
squareRoots <- (sqrt(i))
squareRoots
}
for (i in a) {
squareRoots <- (sqrt(i))
print(squareRoots)
}
for (i in a) {
squareRoots <- (sqrt(i))
print(paste0("Printing output for loop; ",i))
print(squareRoots)
}
squareRoots <- 0
squareRoots
for (i in a) {
while(length(squareRoots)< length(a)){
squareRoots[i] <- (sqrt(i))
print(paste0("Printing output for loop; ",i))
}
print(squareRoots)
}
1:length(a)
a <-  c(33,44,55,66,888,99)
squareRoots <- 0
for (i in 1:length(a)) {
while(length(squareRoots)< length(a)){
squareRoots[i] <- (sqrt(a[i]))
print(paste0("Printing output for loop; ",i))
}
print(squareRoots)
}
#how to store
a <-  c(33,44,55,66,888,99)
squareRoots <- 0
#for (i in 1:length(a)) {
squareRoots <- 0
while(length(squareRoots)< length(a)){
squareRoots[i] <- (sqrt(a[i]))
print(paste0("Printing output for loop; ",i))
}
#for (i in 1:length(a)) {
squareRoots <- 0
while(length(squareRoots)< length(a)){
squareRoots[i] <- sqrt(a[i])
# print(paste0("Printing output for loop; ",i))
print(squareRoots)
}
#how to store
a <-  c(33,44,55,66,888,99)
squareRoots <- 0
for (i in 1:length(a)) {
squareRoots[i] <- sqrt(a[i])
# print(paste0("Printing output for loop; ",i))
print(squareRoots)
}
for (i in 1:length(a)) {
squareRoots[i] <- sqrt(a[i])
print(paste0("Done calculating output for s index: ",i-1 "to" i))
print(squareRoots)
}
#how to store
a <-  c(33,44,55,66,888,99)
squareRoots <- 0
for (i in 1:length(a)) {
squareRoots[i] <- sqrt(a[i])
print(paste0("Done calculating output for s index: ",i-1 "to" i))
print(squareRoots)
}
for (i in 1:length(a)) {
squareRoots[i] <- sqrt(a[i])
print(paste0("Done calculating output for s index: ",i-1, "to", i))
print(squareRoots)
}
#how to store
a <-  c(33,44,55,66,888,99)
squareRoots <- 0
1:length(a
)
seg.new <- seq(10,100, by = 10)
seg.new
dim(seg.new) <- c(2 , 5)
seg.new
###creating matrices in one line
stockstoday <- matrix(c(35.2,45.6,56.4,24.5,13.2,12.4,11.2,38.9,24.6),
nrow = 3, byrow = TRUE,
dimnames(lists(c("de","usa","ind"),
c("2014","2015","2016"))))
stockstoday
###creating matrices in one line
stockstoday <- matrix(c(35.2,45.6,56.4,24.5,13.2,12.4,11.2,38.9,24.6),
nrow = 3, byrow = TRUE,
dimnames(list(c("de","usa","ind"),
c("2014","2015","2016"))))
stockstoday <- matrix(c(35.2,45.6,56.4,24.5,13.2,12.4,11.2,38.9,24.6),
nrow = 3, byrow = TRUE,
dimnames = (list(c("de","usa","ind"),
c("2014","2015","2016"))))
stockstoday
#factors
catvariable <- c("F","M","F","F","M","M")
factor(catvariable)
catsec <- c(1:100)
factor(catsec)
droplevels(catvariable)
#factors
catvariable <- factor(c("F","M","F","F","M","M"))
droplevels(catvariable)
droplevels(catvariable,"F")
newCtVarible <- droplevels(catvariable,"F")
newCtVarible
catvariable
quantsData
quantsData <- data.frame(
Quants = c("Joy Akinyi","Maggy Maina","Andrew Abok","Calvin Mwange","Brian Ouchoh"),
Age = c(21,25,30,24,23),
heights = c(180.0,175.0,183.4,182.0,179.0),
Gender = c("F","F","M","M","M"))
##adding a column after heights
quantsData <- quantsData %>%
add_column(status = c("s","m","m","s","s"),.after = "heights" )
quantsData
##rename quants - names, heights - height,
names(quantsData)[c(1,3,4)] <- c("Names","Height","Status")
quantsData
#Status <- c("s","m","m","s","s")
##vectorization of operations
fullstatus <- function(inputcol){
teamsreturn <- vector()
for (i in 1:length(inputcol)) {
if(inputcol[i] == "s"){
teamsreturn[i] <- "Single"
}else{
teamsreturn[i] <- "Married"
}
}
return(teamsreturn)
}
quantsData$Status <- fullstatus(quantsData$Status)
quantsData
somevec <- vector()
result <- append(somevec,1.0)
result <- append(somevec, 2.0)
##asst
##change gender to be in full.
##make the names- both names
fullnames <- function(inputcol){
genderfull <- vector()
for (i in 1:length(inputcol)) {
if(inputcol[i] == "M"){
genderfull[i] <- "Male"
}else{
genderfull[i] <- "Female"
}
}
return(genderfull)
}
quantsData$Gender <- fullnames(quantsData$Gender)
quantsData
quantsData <- data.frame(
Quants = c("Joy Akinyi","Maggy Maina","Andrew Abok","Calvin Mwange","Brian Ouchoh"),
Age = c(21,25,30,24,23),
heights = c(180.0,175.0,183.4,182.0,179.0),
Gender = c("F","F","M","M","M"))
fullnames <- function(inputcol){
genderfull <- vector()
for (i in 1:length(inputcol)) {
if(inputcol[i] == "M"){
genderfull[i] <- "Male"
}else{
genderfull[i] <- "Female"
}
}
return(genderfull)
}
quantsData$Gender <- fullnames(quantsData$Gender)
quantsData
for (i in 1:5) {
testAnswer <- function(){
n <- readline(prompt = "Please enter your answer: ")
}
answer <- as.integer(testAnswer())
##Asst while loops
if((answer %in% c(40:50))== FALSE) {
print("the answer must be a value between 40....50")
}else{print(paste0("good, ",answer," is a value between 40...50" ))}
break
}
savehistory("E:/Projects/R Projects/Analytics training/history.Rhistory")
######################Data Structures###################
someVec <- c(2,3,4,5,6,7,8,9,10)
###indexing
someVec[5:length(someVec)]
logiY <-  x > 10
logiY
logicTwo <- x == 10
logicTwo
print(x)
print(x)
logicThree <- x < 10
somelist
namedLists <- list(c("joy","andrew","carlvin"),c(19,20,22))
namedLists
names(namedLists) <- c("name","Age")
str(namedLists)
namedLists
marketDataDf <- data.frame(securities = c("Safaricom","Equity Bank","KCB","Sanalam"),
prices = c(35,50,51,20),
volume = c(1000000,50000,2000000,500001))
print(marketDataDf)
distance <- 0
maxDistance <- 10
while (distance <= maxDistance) {
print(distance)
distance = distance + 1
}
##Asst while loops
if((answer %in% c(40:50))== FALSE) {
print("the answer must be a value between 40....50")
}else{print(paste0("good, ",answer," is a value between 40...50" ))}
55
for (i in 1:5) {
testAnswer <- function(){
n <- readline(prompt = "Please enter your answer: ")
}
answer <- as.integer(testAnswer())
##Asst while loops
if((answer %in% c(40:50))== FALSE) {
print("the answer must be a value between 40....50")
}else{print(paste0("good, ",answer," is a value between 40...50" ))}
break
}
45
###conditional statements
w <- 5
if (w > 5) {
print("w is greatet than 5")
} else {
print("w is not greater than 5")
}
##ifelse
a <- c(5,6,7,8,9)
ifelse(a%%2 == 0, "even", "odd")
